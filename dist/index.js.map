{"version":3,"file":"index.js","sources":["../src/GridHelper/index.tsx","../src/Grid/Grid.constants.ts","../src/Grid/GridSystem.tsx","../src/Grid/Grid.hooks.ts","../src/Grid/Grid.tsx","../src/Grid/GridColumn.tsx"],"sourcesContent":["import React, {CSSProperties, FunctionComponent, useContext, useEffect, useState} from 'react'\nimport {Column, Grid, GridSystemContext, useBreakpoint} from '..';\n\nimport styles from './GridHelper.module.css';\n\n\ninterface GridHelperProps {\n    margin?: {\n        [index: string]: string;\n    }\n}\n\n\nexport const GridHelper: FunctionComponent<GridHelperProps> =\n    ({\n         margin\n     }): JSX.Element => {\n\n        const savedVisibility = (localStorage.getItem('grid-helper') === 'true');\n        const {breakpoints, gridHelperColumnColor} = useContext(GridSystemContext)\n        const currentBreakpoint = useBreakpoint()\n        const [visible, setVisible] = useState<boolean>(savedVisibility ? savedVisibility : false);\n\n        const columnStyle: CSSProperties = {\n            backgroundColor: 'rgba(0, 0, 0, .1)'\n        };\n\n        if (gridHelperColumnColor) {\n            columnStyle.backgroundColor = gridHelperColumnColor;\n        }\n\n        useEffect(() => {\n            const toggleGrid = ({key, ctrlKey}: KeyboardEvent): void => {\n                if (ctrlKey && key === 'g') {\n                    const isVisible = !visible;\n                    setVisible(isVisible);\n                    localStorage.setItem('grid-helper', isVisible.toString());\n                }\n            };\n\n            window.addEventListener('keyup', toggleGrid);\n\n            return (): void => window.removeEventListener('keyup', toggleGrid);\n        }, [visible]);\n\n        return (\n            <div className={`${styles.wrapper} ${visible ? styles.wrapper__visible : ''}`}>\n                {Object.keys(breakpoints).map((breakpoint, index) => (\n                    <div\n                        className={styles.container}\n                        style={{\n                            display: currentBreakpoint !== breakpoint ? 'none' : '',\n                            margin: margin && margin[breakpoint] ? `0 ${margin[breakpoint]}` : 'auto'\n                        }} key={`g-${breakpoint}-${index}`}>\n                        <Grid className={styles.container}>\n                            {\n                                [...Array(breakpoints[breakpoint].columns)].fill('c').map((column, index) =>\n                                    <Column key={`${breakpoint}-${column}-${index}`} className={styles.column}\n                                            size={{[breakpoint]: 1}}>\n                                        <div style={columnStyle} className={styles.columnFill}/>\n                                    </Column>)\n                            }\n                        </Grid>\n                    </div>\n                ))}\n            </div>\n        )\n    }\n","import {Breakpoint, GridSettings} from \"./Grid.interfaces\";\n\nexport const GRID_SETTINGS: GridSettings = {\n    breakpoints: {\n        sm: {\n            columns: 4,\n            gutterSize: 5,\n            maxWidth: 600,\n        },\n        md: {\n            columns: 8,\n            gutterSize: 5,\n            minWidth: 600,\n            maxWidth: 900,\n        },\n        lg: {\n            columns: 12,\n            gutterSize: 10,\n            minWidth: 900,\n        }\n    },\n    prefixes: {\n        grid: 'g',\n        gridColumn: 'gc',\n    }\n}\n\nconst getBreakpointQuery = (\n    {minWidth, maxWidth}: Breakpoint,\n    styles: string\n) => {\n    const query = [];\n\n    if (minWidth) {\n        query.push(`(min-width: ${minWidth}px)`);\n    }\n    if (maxWidth) {\n        query.push(`(max-width: ${maxWidth}px)`);\n    }\n\n    return `@media ${query.join(' and ')} {${styles}}`\n};\n\nexport const createStyles = (gridSettings: GridSettings) => {\n    const style = document.createElement('style');\n    const mediaQuery: string[] = [];\n    const {breakpoints, prefixes} = gridSettings;\n\n    const gridStyle = `.${prefixes.grid} {\n        display: flex;\n        flex-basis: auto;\n        flex-direction: row;\n        flex-wrap: wrap;\n        width: auto;\n    }`;\n\n    Object.keys(breakpoints).forEach((breakpoint) => {\n        let items = '';\n        const {gutterSize} = breakpoints[breakpoint];\n\n        // CSS Grid\n        items += `.${prefixes.grid}-${breakpoint} {\n                margin-left: -${gutterSize}px;\n                margin-right: -${gutterSize}px;\n            }`;\n\n        // CSS column\n        items += `.${prefixes.gridColumn}-${breakpoint} {\n                box-sizing: border-box;\n                padding-left: ${gutterSize}px;\n                padding-right: ${gutterSize}px;\n            }`;\n\n        for (let i = 1; i <= breakpoints[breakpoint].columns; i++) {\n            for (let j = 1; j <= i; j++) {\n                const width = (j / i) * 100;\n\n                items += `.${prefixes.gridColumn}-${breakpoint}-${j}-${i} {\n                        flex-basis: ${width}%;\n                        width: ${width}%;\n                    }`;\n\n                // CSS offset left\n                items += `.${prefixes.gridColumn}-ol-${breakpoint}-${j}-${i} {\n                        margin-left: ${width}%;\n                    }`;\n\n                // CSS offset left\n                items += `.${prefixes.gridColumn}-or-${breakpoint}-${j}-${i} {\n                        margin-right: ${width}%;\n                    }`;\n            }\n        }\n\n        mediaQuery.push(getBreakpointQuery(breakpoints[breakpoint], items))\n    });\n\n    mediaQuery.push(gridStyle);\n\n    document.head.appendChild(style);\n    style.appendChild(document.createTextNode(mediaQuery.join('')));\n};\n","import React, {createContext, FunctionComponent, useEffect} from 'react'\nimport {GridSettings, GridSystemProps} from './Grid.interfaces'\nimport {GridHelper} from \"../GridHelper\";\nimport {createStyles, GRID_SETTINGS} from \"./Grid.constants\";\n\n\nexport const GridSystemContext = createContext<GridSettings>(GRID_SETTINGS);\n\nexport const GridSystem: FunctionComponent<GridSystemProps> =\n    ({\n         settings = GRID_SETTINGS,\n         useGridHelper = false,\n         children\n     }) => {\n        useEffect(() => createStyles(settings), [settings]);\n\n        return (\n            <GridSystemContext.Provider value={settings}>\n                {children}\n                {useGridHelper && <GridHelper margin={settings?.gridHelperMargins}/>}\n            </GridSystemContext.Provider>\n        );\n    }\n","import {useContext, useEffect, useState} from \"react\";\nimport {GridSystemContext} from \"./GridSystem\";\n\nexport const useBreakpoint = () => {\n    const gridContext = useContext(GridSystemContext);\n    const [breakpoint, setBreakpoint] = useState<string>(\n        Object.keys(gridContext.breakpoints)[0]\n    );\n\n    const resvolveBreakpoint = () => {\n        const bp = Object.keys(gridContext.breakpoints).find((key) => {\n            const {minWidth, maxWidth} = gridContext.breakpoints[key];\n            const {innerWidth} = window;\n\n            let breakpoint = null;\n\n            if (\n                minWidth &&\n                maxWidth &&\n                innerWidth >= minWidth &&\n                innerWidth <= maxWidth\n            ) {\n                breakpoint = key;\n            } else if (minWidth && !maxWidth && innerWidth >= minWidth) {\n                breakpoint = key;\n            } else if (!minWidth && maxWidth && innerWidth < maxWidth) {\n                breakpoint = key;\n            }\n\n            return breakpoint;\n        });\n\n        if (bp) {\n            setBreakpoint(bp);\n        }\n    }\n\n    useEffect(() => {\n        let tm: number;\n        const handleResize = () => {\n            tm = window.setTimeout(() => resvolveBreakpoint(), 10);\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n\n        handleResize();\n\n        return () => {\n            window.clearTimeout(tm);\n            window.removeEventListener(\"resize\", handleResize);\n        }\n    }, [gridContext.breakpoints]);\n\n    return breakpoint;\n};\n","import React, { useContext } from 'react'\nimport { GridSystemContext } from './GridSystem'\n\ninterface GridContainerProps {\n  className?: string;\n  style?: {};\n}\n\nexport const Grid: React.FC<GridContainerProps> = ({\n  children,\n  className = '',\n  style\n}) => {\n  const { breakpoints, prefixes } = useContext(GridSystemContext)\n  const classNames = Object.keys(breakpoints)\n    .map((breakpoint) => `g-${breakpoint}`)\n    .join(' ')\n\n  return (\n    <div\n      style={style}\n      className={`${prefixes.grid} ${classNames} ${className}`}\n    >\n      {children}\n    </div>\n  )\n}\n","import React, {FunctionComponent, useContext, useEffect, useRef, useState} from 'react';\nimport {GridSystemContext} from './GridSystem';\n\n\ninterface GridColumnProps {\n  className?: string;\n  size: {\n    [index: string]: number | undefined;\n  },\n  offsetLeft?: {\n    [index: string]: number | undefined;\n  },\n  offsetRight?: {\n    [index: string]: number | undefined;\n  }\n}\n\ninterface ColumnState {\n  classNames: string;\n  dataProps: { [index: string]: string | number; }\n}\n\nconst defaultState = {classNames: '', dataProps: {}};\n\nexport const Column: FunctionComponent<GridColumnProps> =\n  ({\n     children,\n     className = '',\n     size,\n     offsetLeft,\n     offsetRight\n   }) => {\n    const refColumn = useRef<HTMLDivElement>(null);\n    const {breakpoints, prefixes} = useContext(GridSystemContext);\n    const [state, setState] = useState<ColumnState>(defaultState)\n\n    const getParentSizes = () => {\n      const classNames: string[] = [];\n      let dataProps: { [index: string]: string | number } = {};\n\n      Object.keys(breakpoints).forEach(breakpoint => {\n        const parentSize = refColumn?.current?.parentElement\n          ?.closest(`[data-column-size-${breakpoint}]`)\n          ?.getAttribute(`data-column-size-${breakpoint}`);\n\n        const totalColumns = parentSize ? parentSize : breakpoints[breakpoint].columns;\n        const columnSize = size[breakpoint] ? size[breakpoint] : totalColumns;\n\n        classNames.push(`${prefixes.gridColumn}-${breakpoint} ${prefixes.gridColumn}-${breakpoint}-${columnSize}-${totalColumns}`);\n\n        if (offsetLeft && offsetLeft[breakpoint]) {\n          classNames.push(`${prefixes.gridColumn}-ol-${breakpoint}-${offsetLeft[breakpoint]}-${totalColumns}`);\n        }\n\n        if (offsetRight && offsetRight[breakpoint]) {\n          classNames.push(`${prefixes.gridColumn}-or-${breakpoint}-${offsetRight[breakpoint]}-${totalColumns}`);\n        }\n\n        if (columnSize) {\n          dataProps[`data-column-size-${breakpoint}`] = columnSize;\n        }\n      });\n\n      setState({\n        classNames: classNames.join(' '),\n        dataProps,\n      });\n    }\n\n    useEffect(() => getParentSizes(), [size, offsetLeft, offsetRight]);\n\n    return <div\n      ref={refColumn}\n      {...state.dataProps}\n      className={`${state.classNames} ${className}`}>\n      {children}\n    </div>;\n  };\n"],"names":["GridHelper","margin","savedVisibility","localStorage","getItem","useContext","GridSystemContext","breakpoints","gridHelperColumnColor","currentBreakpoint","useBreakpoint","useState","visible","setVisible","columnStyle","backgroundColor","useEffect","toggleGrid","key","ctrlKey","isVisible","setItem","toString","window","addEventListener","removeEventListener","React","className","styles","wrapper","wrapper__visible","Object","keys","map","breakpoint","index","container","style","display","Grid","Array","columns","fill","column","Column","size","columnFill","GRID_SETTINGS","sm","gutterSize","maxWidth","md","minWidth","lg","prefixes","grid","gridColumn","getBreakpointQuery","query","push","join","createStyles","gridSettings","document","createElement","mediaQuery","gridStyle","forEach","items","i","j","width","head","appendChild","createTextNode","createContext","GridSystem","settings","useGridHelper","children","Provider","value","gridHelperMargins","gridContext","setBreakpoint","resvolveBreakpoint","bp","find","innerWidth","tm","handleResize","setTimeout","clearTimeout","classNames","defaultState","dataProps","offsetLeft","offsetRight","refColumn","useRef","state","setState","getParentSizes","parentSize","current","parentElement","closest","getAttribute","totalColumns","columnSize","ref"],"mappings":"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"}