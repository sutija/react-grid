{"version":3,"file":"index.modern.js","sources":["../src/GridHelper/index.tsx","../src/Grid/Grid.constants.ts","../src/Grid/GridSystem.tsx","../src/Grid/Grid.hooks.ts","../src/Grid/Grid.tsx","../src/Grid/GridColumn.tsx"],"sourcesContent":["import React, {CSSProperties, FunctionComponent, useContext, useEffect, useState} from 'react'\nimport {Column, Grid, GridSystemContext, useBreakpoint} from '..';\n\nimport styles from './GridHelper.module.css';\n\n\ninterface GridHelperProps {\n    margin?: {\n        [index: string]: string;\n    }\n}\n\n\nexport const GridHelper: FunctionComponent<GridHelperProps> =\n    ({\n         margin\n     }): JSX.Element => {\n\n        const savedVisibility = (localStorage.getItem('grid-helper') === 'true');\n        const {breakpoints, gridHelperColumnColor} = useContext(GridSystemContext)\n        const currentBreakpoint = useBreakpoint()\n        const [visible, setVisible] = useState<boolean>(savedVisibility ? savedVisibility : false);\n\n        const columnStyle: CSSProperties = {\n            backgroundColor: 'rgba(0, 0, 0, .1)'\n        };\n\n        if (gridHelperColumnColor) {\n            columnStyle.backgroundColor = gridHelperColumnColor;\n        }\n\n        useEffect(() => {\n            const toggleGrid = ({key, ctrlKey}: KeyboardEvent): void => {\n                if (ctrlKey && key === 'g') {\n                    const isVisible = !visible;\n                    setVisible(isVisible);\n                    localStorage.setItem('grid-helper', isVisible.toString());\n                }\n            };\n\n            window.addEventListener('keyup', toggleGrid);\n\n            return (): void => window.removeEventListener('keyup', toggleGrid);\n        }, [visible]);\n\n        return (\n            <div className={`${styles.wrapper} ${visible ? styles.wrapper__visible : ''}`}>\n                {Object.keys(breakpoints).map((breakpoint, index) => (\n                    <div\n                        className={styles.container}\n                        style={{\n                            display: currentBreakpoint !== breakpoint ? 'none' : '',\n                            margin: margin && margin[breakpoint] ? `0 ${margin[breakpoint]}` : 'auto'\n                        }} key={`g-${breakpoint}-${index}`}>\n                        <Grid className={styles.container}>\n                            {\n                                [...Array(breakpoints[breakpoint].columns)].fill('c').map((column, index) =>\n                                    <Column key={`${breakpoint}-${column}-${index}`} className={styles.column}\n                                            size={{[breakpoint]: 1}}>\n                                        <div style={columnStyle} className={styles.columnFill}/>\n                                    </Column>)\n                            }\n                        </Grid>\n                    </div>\n                ))}\n            </div>\n        )\n    }\n","import {Breakpoint, GridSettings} from \"./Grid.interfaces\";\n\nexport const GRID_SETTINGS: GridSettings = {\n    breakpoints: {\n        sm: {\n            columns: 4,\n            gutterSize: 5,\n            maxWidth: 600,\n        },\n        md: {\n            columns: 8,\n            gutterSize: 5,\n            minWidth: 600,\n            maxWidth: 900,\n        },\n        lg: {\n            columns: 12,\n            gutterSize: 10,\n            minWidth: 900,\n        }\n    },\n    prefixes: {\n        grid: 'g',\n        gridColumn: 'gc',\n    }\n}\n\nconst getBreakpointQuery = (\n    {minWidth, maxWidth}: Breakpoint,\n    styles: string\n) => {\n    const query = [];\n\n    if (minWidth) {\n        query.push(`(min-width: ${minWidth}px)`);\n    }\n    if (maxWidth) {\n        query.push(`(max-width: ${maxWidth}px)`);\n    }\n\n    return `@media ${query.join(' and ')} {${styles}}`\n};\n\nexport const createStyles = (gridSettings: GridSettings) => {\n    const style = document.createElement('style');\n    const mediaQuery: string[] = [];\n    const {breakpoints, prefixes} = gridSettings;\n\n    const gridStyle = `.${prefixes.grid} {\n        display: flex;\n        flex-basis: auto;\n        flex-direction: row;\n        flex-wrap: wrap;\n        width: auto;\n    }`;\n\n    Object.keys(breakpoints).forEach((breakpoint) => {\n        let items = '';\n        const {gutterSize} = breakpoints[breakpoint];\n\n        // CSS Grid\n        items += `.${prefixes.grid}-${breakpoint} {\n                margin-left: -${gutterSize}px;\n                margin-right: -${gutterSize}px;\n            }`;\n\n        // CSS column\n        items += `.${prefixes.gridColumn}-${breakpoint} {\n                box-sizing: border-box;\n                padding-left: ${gutterSize}px;\n                padding-right: ${gutterSize}px;\n            }`;\n\n        for (let i = 1; i <= breakpoints[breakpoint].columns; i++) {\n            for (let j = 1; j <= i; j++) {\n                const width = (j / i) * 100;\n\n                items += `.${prefixes.gridColumn}-${breakpoint}-${j}-${i} {\n                        flex-basis: ${width}%;\n                        width: ${width}%;\n                    }`;\n\n                // CSS offset left\n                items += `.${prefixes.gridColumn}-ol-${breakpoint}-${j}-${i} {\n                        margin-left: ${width}%;\n                    }`;\n\n                // CSS offset left\n                items += `.${prefixes.gridColumn}-or-${breakpoint}-${j}-${i} {\n                        margin-right: ${width}%;\n                    }`;\n            }\n        }\n\n        mediaQuery.push(getBreakpointQuery(breakpoints[breakpoint], items))\n    });\n\n    mediaQuery.push(gridStyle);\n\n    document.head.appendChild(style);\n    style.appendChild(document.createTextNode(mediaQuery.join('')));\n};\n","import React, {createContext, FunctionComponent, useEffect} from 'react'\nimport {GridSettings, GridSystemProps} from './Grid.interfaces'\nimport {GridHelper} from \"../GridHelper\";\nimport {createStyles, GRID_SETTINGS} from \"./Grid.constants\";\n\n\nexport const GridSystemContext = createContext<GridSettings>(GRID_SETTINGS);\n\nexport const GridSystem: FunctionComponent<GridSystemProps> =\n    ({\n         settings = GRID_SETTINGS,\n         useGridHelper = false,\n         children\n     }) => {\n        useEffect(() => createStyles(settings), [settings]);\n\n        return (\n            <GridSystemContext.Provider value={settings}>\n                {children}\n                {useGridHelper && <GridHelper margin={settings?.gridHelperMargins}/>}\n            </GridSystemContext.Provider>\n        );\n    }\n","import {useContext, useEffect, useState} from \"react\";\nimport {GridSystemContext} from \"./GridSystem\";\n\nexport const useBreakpoint = () => {\n    const gridContext = useContext(GridSystemContext);\n    const [breakpoint, setBreakpoint] = useState<string>(\n        Object.keys(gridContext.breakpoints)[0]\n    );\n\n    const resvolveBreakpoint = () => {\n        const bp = Object.keys(gridContext.breakpoints).find((key) => {\n            const {minWidth, maxWidth} = gridContext.breakpoints[key];\n            const {innerWidth} = window;\n\n            let breakpoint = null;\n\n            if (\n                minWidth &&\n                maxWidth &&\n                innerWidth >= minWidth &&\n                innerWidth <= maxWidth\n            ) {\n                breakpoint = key;\n            } else if (minWidth && !maxWidth && innerWidth >= minWidth) {\n                breakpoint = key;\n            } else if (!minWidth && maxWidth && innerWidth < maxWidth) {\n                breakpoint = key;\n            }\n\n            return breakpoint;\n        });\n\n        if (bp) {\n            setBreakpoint(bp);\n        }\n    }\n\n    useEffect(() => {\n        let tm: number;\n        const handleResize = () => {\n            tm = window.setTimeout(() => resvolveBreakpoint(), 10);\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n\n        handleResize();\n\n        return () => {\n            window.clearTimeout(tm);\n            window.removeEventListener(\"resize\", handleResize);\n        }\n    }, [gridContext.breakpoints]);\n\n    return breakpoint;\n};\n","import React, { useContext } from 'react'\nimport { GridSystemContext } from './GridSystem'\n\ninterface GridContainerProps {\n  className?: string;\n  style?: {};\n}\n\nexport const Grid: React.FC<GridContainerProps> = ({\n  children,\n  className = '',\n  style\n}) => {\n  const { breakpoints, prefixes } = useContext(GridSystemContext)\n  const classNames = Object.keys(breakpoints)\n    .map((breakpoint) => `g-${breakpoint}`)\n    .join(' ')\n\n  return (\n    <div\n      style={style}\n      className={`${prefixes.grid} ${classNames} ${className}`}\n    >\n      {children}\n    </div>\n  )\n}\n","import React, {FunctionComponent, useContext, useEffect, useRef, useState} from 'react';\nimport {GridSystemContext} from './GridSystem';\n\n\ninterface GridColumnProps {\n  className?: string;\n  size: {\n    [index: string]: number | undefined;\n  },\n  offsetLeft?: {\n    [index: string]: number | undefined;\n  },\n  offsetRight?: {\n    [index: string]: number | undefined;\n  }\n}\n\ninterface ColumnState {\n  classNames: string;\n  dataProps: { [index: string]: string | number; }\n}\n\nconst defaultState = {classNames: '', dataProps: {}};\n\nexport const Column: FunctionComponent<GridColumnProps> =\n  ({\n     children,\n     className = '',\n     size,\n     offsetLeft,\n     offsetRight\n   }) => {\n    const refColumn = useRef<HTMLDivElement>(null);\n    const {breakpoints, prefixes} = useContext(GridSystemContext);\n    const [state, setState] = useState<ColumnState>(defaultState)\n\n    const getParentSizes = () => {\n      const classNames: string[] = [];\n      let dataProps: { [index: string]: string | number } = {};\n\n      Object.keys(breakpoints).forEach(breakpoint => {\n        const parentSize = refColumn?.current?.parentElement\n          ?.closest(`[data-column-size-${breakpoint}]`)\n          ?.getAttribute(`data-column-size-${breakpoint}`);\n\n        const totalColumns = parentSize ? parentSize : breakpoints[breakpoint].columns;\n        const columnSize = size[breakpoint] ? size[breakpoint] : totalColumns;\n\n        classNames.push(`${prefixes.gridColumn}-${breakpoint} ${prefixes.gridColumn}-${breakpoint}-${columnSize}-${totalColumns}`);\n\n        if (offsetLeft && offsetLeft[breakpoint]) {\n          classNames.push(`${prefixes.gridColumn}-ol-${breakpoint}-${offsetLeft[breakpoint]}-${totalColumns}`);\n        }\n\n        if (offsetRight && offsetRight[breakpoint]) {\n          classNames.push(`${prefixes.gridColumn}-or-${breakpoint}-${offsetRight[breakpoint]}-${totalColumns}`);\n        }\n\n        if (columnSize) {\n          dataProps[`data-column-size-${breakpoint}`] = columnSize;\n        }\n      });\n\n      setState({\n        classNames: classNames.join(' '),\n        dataProps,\n      });\n    }\n\n    useEffect(() => getParentSizes(), [size, offsetLeft, offsetRight]);\n\n    return <div\n      ref={refColumn}\n      {...state.dataProps}\n      className={`${state.classNames} ${className}`}>\n      {children}\n    </div>;\n  };\n"],"names":["GridHelper","margin","savedVisibility","localStorage","getItem","breakpoints","gridHelperColumnColor","useContext","GridSystemContext","currentBreakpoint","useBreakpoint","visible","setVisible","useState","columnStyle","backgroundColor","useEffect","toggleGrid","key","ctrlKey","isVisible","setItem","toString","window","addEventListener","removeEventListener","React","className","styles","wrapper","wrapper__visible","Object","keys","map","breakpoint","index","container","style","display","Grid","Array","columns","fill","column","Column","size","columnFill","GRID_SETTINGS","sm","gutterSize","maxWidth","md","minWidth","lg","prefixes","grid","gridColumn","getBreakpointQuery","query","push","join","createStyles","gridSettings","document","createElement","mediaQuery","gridStyle","forEach","items","i","j","width","head","appendChild","createTextNode","createContext","GridSystem","settings","useGridHelper","children","Provider","value","gridHelperMargins","gridContext","setBreakpoint","resvolveBreakpoint","bp","find","innerWidth","tm","handleResize","setTimeout","clearTimeout","classNames","defaultState","dataProps","offsetLeft","offsetRight","refColumn","useRef","state","setState","getParentSizes","parentSize","current","parentElement","closest","getAttribute","totalColumns","columnSize","ref"],"mappings":"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"}